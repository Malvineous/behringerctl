const assert = require('assert');

const sevenEightCoder = require('../sevenEightCoder.js');

describe('encoding 8-bit data in 7 bits', () => {

	it('must encode one 7-byte group', () => {
		const input = [
			0xFF, 0x55, 0xAA, 0x00, 0x7F, 0x80, 0x01,
		];
		const output = sevenEightCoder.encode(input);

		assert.deepEqual(output, [
			0x7F, 0x55, 0x2A, 0x00, 0x7F, 0x00, 0x01, 0x52,
		]);
	});

	it('must encode two 7-byte groups', () => {
		const input = [
			0xFF, 0x55, 0xAA, 0x00, 0x7F, 0x80, 0x01,
			0x01, 0x55, 0xAA, 0x00, 0x7F, 0x80, 0xFF,
		];
		const output = sevenEightCoder.encode(input);

		assert.deepEqual(output, [
			0x7F, 0x55, 0x2A, 0x00, 0x7F, 0x00, 0x01, 0x52,
			0x01, 0x55, 0x2A, 0x00, 0x7F, 0x00, 0x7F, 0x13,
		]);
	});

	it('must encode an incomplete group', () => {
		const input = [
			0xFF, 0x55, 0xAA, 0x00, 0x7F,
		];
		const output = sevenEightCoder.encode(input);

		assert.deepEqual(output, [
			0x7F, 0x55, 0x2A, 0x00, 0x7F, 0x00, 0x00, 0x50,
		]);
	});

});

describe('decoding 8-bit data from 7 bits', () => {

	it('must decode one 7-byte group', () => {
		const input = [
			0x7F, 0x55, 0x2A, 0x00, 0x7F, 0x00, 0x01, 0x52,
		];
		const output = sevenEightCoder.decode(input);

		assert.deepEqual(output, [
			0xFF, 0x55, 0xAA, 0x00, 0x7F, 0x80, 0x01,
		]);
	});

	it('must decode two 7-byte groups', () => {
		const input = [
			0x7F, 0x55, 0x2A, 0x00, 0x7F, 0x00, 0x01, 0x52,
			0x01, 0x55, 0x2A, 0x00, 0x7F, 0x00, 0x7F, 0x13,
		];
		const output = sevenEightCoder.decode(input);

		assert.deepEqual(output, [
			0xFF, 0x55, 0xAA, 0x00, 0x7F, 0x80, 0x01,
			0x01, 0x55, 0xAA, 0x00, 0x7F, 0x80, 0xFF,
		]);
	});

});
